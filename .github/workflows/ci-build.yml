name: Docker Build

on:
  push:
    branches:
      - main
      - test
      - dev

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      APP_ENV: testing
      APP_DEBUG: true
      DB_CONNECTION: sqlite
      DB_DATABASE: ${{ github.workspace }}/database/database.sqlite
      CACHE_DRIVER: array
      SESSION_DRIVER: array
      QUEUE_CONNECTION: sync
      BROADCAST_DRIVER: log
      MAIL_MAILER: log

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: pdo_sqlite, mbstring, bcmath, intl
          coverage: none

      - name: Cache Composer (vendor)
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Prepare .env & APP_KEY
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate --force

      - name: Prepare SQLite file database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Run migrations (once for testing DB)
        run: php artisan migrate --force

      - name: Smoke test homepage
        run: |
          php artisan serve --host=127.0.0.1 --port=8000 & echo $! > server.pid
          sleep 3
          curl -fsS http://127.0.0.1:8000/ -o /dev/null
          kill $(cat server.pid)

      - name: Run tests
        run: php artisan test

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: laravel-logs
          path: storage/logs/*.log

  build-assets:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install & build
        run: |
          npm ci
          npm run build

      - name: Upload built assets (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: public-build
          path: public/build/

  docker:
    runs-on: ubuntu-latest
    needs: build-assets
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built assets
        uses: actions/download-artifact@v4
        with:
          name: public-build
          path: public/build

      - name: Set lowercase env vars
        id: vars
        run: |
          echo "IMAGE_NAME=ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(echo $GITHUB_REF_NAME | tr '[:upper:]' '[:lower:]' | tr '/' '-')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
