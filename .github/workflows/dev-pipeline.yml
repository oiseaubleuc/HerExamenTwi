name: Advanced Dev Pipeline

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment '
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - testing
        - demo

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'
  COMPOSER_CACHE_DIR: ~/.composer/cache

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Static Analysis
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo_sqlite, mbstring, bcmath, intl, xml, zip
          coverage: xdebug

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHPStan
        run: |
          composer require --dev phpstan/phpstan
          ./vendor/bin/phpstan analyse app/ --level=5

      - name: Run PHP CS Fixer
        run: |
          composer require --dev friendsofphp/php-cs-fixer
          ./vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: Run PHP Mess Detector
        run: |
          composer require --dev phpmd/phpmd
          ./vendor/bin/phpmd app/ text cleancode,codesize,controversial,design,naming,unusedcode

  security-scan:
    runs-on: ubuntu-latest
    name: Security Analysis
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo_sqlite, mbstring, bcmath, intl

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run Security Check
        run: |
          composer require --dev enlightn/security-checker
          ./vendor/bin/security-checker security:check composer.lock

      - name: Run PHPCS Security
        run: |
          composer require --dev dealerdirect/phpcodesniffer-composer-installer
          composer require --dev phpcompatibility/php-compatibility
          ./vendor/bin/phpcs --standard=PHPCompatibility --runtime-set testVersion 8.3 app/

  comprehensive-testing:
    runs-on: ubuntu-latest
    name: Comprehensive Testing
    strategy:
      matrix:
        php-version: [8.2, 8.3]
        laravel-version: ['10.*', '11.*']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: pdo_sqlite, mbstring, bcmath, intl, xml, zip
          coverage: xdebug

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: composer-${{ runner.os }}-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Prepare environment
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate --force

      - name: Setup database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests with coverage
        run: |
          php artisan test --coverage --min=70
          php artisan test --parallel

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  performance-testing:
    runs-on: ubuntu-latest
    name: Performance Testing
    needs: comprehensive-testing
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo_sqlite, mbstring, bcmath, intl

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run performance tests
        run: |
          composer require --dev phpunit/phpunit
          ./vendor/bin/phpunit --testsuite=performance

      - name: Run load tests
        run: |
          composer require --dev k6io/k6
          k6 run tests/load/load-test.js

  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy
    needs: [code-quality, security-scan, comprehensive-testing, performance-testing]
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build assets
        run: |
          npm ci
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository }}:dev
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          driver-opts: |
            image=moby/buildkit:v0.12.0

      - name: Deploy to staging
        if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == ''
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here

      - name: Deploy to testing
        if: github.event.inputs.environment == 'testing'
        run: |
          echo "Deploying to testing environment..."
          # Add your testing deployment logic here

      - name: Deploy to demo
        if: github.event.inputs.environment == 'demo'
        run: |
          echo "Deploying to demo environment..."
          # Add your demo deployment logic here

  notify:
    runs-on: ubuntu-latest
    name: Notify Team
    needs: build-and-deploy
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo " Dev pipeline completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo " Dev pipeline failed!"
          echo "Check the logs for details"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
